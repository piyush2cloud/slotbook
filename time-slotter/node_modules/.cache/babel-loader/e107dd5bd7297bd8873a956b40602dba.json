{"ast":null,"code":"var common = require('./common');\n\nvar fs = require('fs');\n\nvar path = require('path');\n\ncommon.register('mkdir', _mkdir, {\n  cmdOptions: {\n    'p': 'fullpath'\n  }\n}); // Recursively creates `dir`\n\nfunction mkdirSyncRecursive(dir) {\n  var baseDir = path.dirname(dir); // Prevents some potential problems arising from malformed UNCs or\n  // insufficient permissions.\n\n  /* istanbul ignore next */\n\n  if (baseDir === dir) {\n    common.error('dirname() failed: [' + dir + ']');\n  } // Base dir exists, no recursion necessary\n\n\n  if (fs.existsSync(baseDir)) {\n    fs.mkdirSync(dir, parseInt('0777', 8));\n    return;\n  } // Base dir does not exist, go recursive\n\n\n  mkdirSyncRecursive(baseDir); // Base dir created, can create dir\n\n  fs.mkdirSync(dir, parseInt('0777', 8));\n} //@\n//@ ### mkdir([options,] dir [, dir ...])\n//@ ### mkdir([options,] dir_array)\n//@\n//@ Available options:\n//@\n//@ + `-p`: full path (and create intermediate directories, if necessary)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ mkdir('-p', '/tmp/a/b/c/d', '/tmp/e/f/g');\n//@ mkdir('-p', ['/tmp/a/b/c/d', '/tmp/e/f/g']); // same as above\n//@ ```\n//@\n//@ Creates directories.\n\n\nfunction _mkdir(options, dirs) {\n  if (!dirs) common.error('no paths given');\n\n  if (typeof dirs === 'string') {\n    dirs = [].slice.call(arguments, 1);\n  } // if it's array leave it as it is\n\n\n  dirs.forEach(function (dir) {\n    try {\n      var stat = common.statNoFollowLinks(dir);\n\n      if (!options.fullpath) {\n        common.error('path already exists: ' + dir, {\n          continue: true\n        });\n      } else if (stat.isFile()) {\n        common.error('cannot create directory ' + dir + ': File exists', {\n          continue: true\n        });\n      }\n\n      return; // skip dir\n    } catch (e) {} // do nothing\n    // Base dir does not exist, and no -p option given\n\n\n    var baseDir = path.dirname(dir);\n\n    if (!fs.existsSync(baseDir) && !options.fullpath) {\n      common.error('no such file or directory: ' + baseDir, {\n        continue: true\n      });\n      return; // skip dir\n    }\n\n    try {\n      if (options.fullpath) {\n        mkdirSyncRecursive(path.resolve(dir));\n      } else {\n        fs.mkdirSync(dir, parseInt('0777', 8));\n      }\n    } catch (e) {\n      var reason;\n\n      if (e.code === 'EACCES') {\n        reason = 'Permission denied';\n      } else if (e.code === 'ENOTDIR' || e.code === 'ENOENT') {\n        reason = 'Not a directory';\n      } else {\n        /* istanbul ignore next */\n        throw e;\n      }\n\n      common.error('cannot create directory ' + dir + ': ' + reason, {\n        continue: true\n      });\n    }\n  });\n  return '';\n} // mkdir\n\n\nmodule.exports = _mkdir;","map":null,"metadata":{},"sourceType":"script"}