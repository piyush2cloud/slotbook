{"ast":null,"code":"var common = require('./common');\n\nvar fs = require('fs');\n\ncommon.register('sort', _sort, {\n  canReceivePipe: true,\n  cmdOptions: {\n    'r': 'reverse',\n    'n': 'numerical'\n  }\n}); // parse out the number prefix of a line\n\nfunction parseNumber(str) {\n  var match = str.match(/^\\s*(\\d*)\\s*(.*)$/);\n  return {\n    num: Number(match[1]),\n    value: match[2]\n  };\n} // compare two strings case-insensitively, but examine case for strings that are\n// case-insensitive equivalent\n\n\nfunction unixCmp(a, b) {\n  var aLower = a.toLowerCase();\n  var bLower = b.toLowerCase();\n  return aLower === bLower ? -1 * a.localeCompare(b) : // unix sort treats case opposite how javascript does\n  aLower.localeCompare(bLower);\n} // compare two strings in the fashion that unix sort's -n option works\n\n\nfunction numericalCmp(a, b) {\n  var objA = parseNumber(a);\n  var objB = parseNumber(b);\n\n  if (objA.hasOwnProperty('num') && objB.hasOwnProperty('num')) {\n    return objA.num !== objB.num ? objA.num - objB.num : unixCmp(objA.value, objB.value);\n  } else {\n    return unixCmp(objA.value, objB.value);\n  }\n} //@\n//@ ### sort([options,] file [, file ...])\n//@ ### sort([options,] file_array)\n//@\n//@ Available options:\n//@\n//@ + `-r`: Reverse the results\n//@ + `-n`: Compare according to numerical value\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ sort('foo.txt', 'bar.txt');\n//@ sort('-r', 'foo.txt');\n//@ ```\n//@\n//@ Return the contents of the `file`s, sorted line-by-line. Sorting multiple\n//@ files mixes their content (just as unix `sort` does).\n\n\nfunction _sort(options, files) {\n  // Check if this is coming from a pipe\n  var pipe = common.readFromPipe();\n  if (!files && !pipe) common.error('no files given');\n  files = [].slice.call(arguments, 1);\n\n  if (pipe) {\n    files.unshift('-');\n  }\n\n  var lines = files.reduce(function (accum, file) {\n    if (file !== '-') {\n      if (!fs.existsSync(file)) {\n        common.error('no such file or directory: ' + file, {\n          continue: true\n        });\n        return accum;\n      } else if (common.statFollowLinks(file).isDirectory()) {\n        common.error('read failed: ' + file + ': Is a directory', {\n          continue: true\n        });\n        return accum;\n      }\n    }\n\n    var contents = file === '-' ? pipe : fs.readFileSync(file, 'utf8');\n    return accum.concat(contents.trimRight().split('\\n'));\n  }, []);\n  var sorted = lines.sort(options.numerical ? numericalCmp : unixCmp);\n\n  if (options.reverse) {\n    sorted = sorted.reverse();\n  }\n\n  return sorted.join('\\n') + '\\n';\n}\n\nmodule.exports = _sort;","map":null,"metadata":{},"sourceType":"script"}