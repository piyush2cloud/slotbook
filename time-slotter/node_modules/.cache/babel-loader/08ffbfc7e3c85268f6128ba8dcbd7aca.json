{"ast":null,"code":"(function (global, factory) {\n  if ('function' == typeof define && define.amd) define(['exports'], factory);else if ('undefined' != typeof exports) factory(exports);else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports), global.help = mod.exports;\n  }\n})(this, function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, '__esModule', {\n    value: !0\n  }), exports.default = function () {\n    var name = this.config.name,\n        firstBig = function (word) {\n      return word.charAt(0).toUpperCase() + word.substr(1);\n    },\n        parts = [],\n        groups = {\n      options: !0,\n      examples: !0\n    };\n\n    for (var group in groups) 0 < this.details[group].length || (groups[group] = !1);\n\n    var optionHandle = groups.options ? '[options] ' : '',\n        value = 'string' == typeof this.config.value ? ' ' + this.config.value : '';\n\n    for (var _group in parts.push(['', 'Usage: ' + this.printMainColor(name) + ' ' + this.printSubColor(optionHandle + value), '']), groups) groups[_group] && (parts.push(['', firstBig(_group) + ':', '', '']), 'examples' == _group ? parts.push(this.generateExamples()) : parts.push(this.generateDetails(_group)), parts.push(['', '']));\n\n    var output = '',\n        _iteratorNormalCompletion = !0,\n        _didIteratorError = !1,\n        _iteratorError = void 0;\n\n    try {\n      for (var _step, part, _iterator = parts[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) part = _step.value, output += part.join('\\n  ');\n    } catch (err) {\n      _didIteratorError = !0, _iteratorError = err;\n    } finally {\n      try {\n        !_iteratorNormalCompletion && _iterator.return && _iterator.return();\n      } finally {\n        if (_didIteratorError) throw _iteratorError;\n      }\n    }\n\n    groups.options || (output = 'No options available');\n    var usageFilter = this.config.usageFilter;\n    'function' == typeof usageFilter && (output = usageFilter(output) || output), console.log(output);\n  };\n});","map":null,"metadata":{},"sourceType":"script"}