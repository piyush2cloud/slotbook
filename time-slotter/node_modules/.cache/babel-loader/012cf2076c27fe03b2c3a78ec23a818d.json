{"ast":null,"code":"var common = require('./common');\n\nvar fs = require('fs');\n\ncommon.register('grep', _grep, {\n  globStart: 2,\n  // don't glob-expand the regex\n  canReceivePipe: true,\n  cmdOptions: {\n    'v': 'inverse',\n    'l': 'nameOnly',\n    'i': 'ignoreCase'\n  }\n}); //@\n//@ ### grep([options,] regex_filter, file [, file ...])\n//@ ### grep([options,] regex_filter, file_array)\n//@\n//@ Available options:\n//@\n//@ + `-v`: Invert `regex_filter` (only print non-matching lines).\n//@ + `-l`: Print only filenames of matching files.\n//@ + `-i`: Ignore case.\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ grep('-v', 'GLOBAL_VARIABLE', '*.js');\n//@ grep('GLOBAL_VARIABLE', '*.js');\n//@ ```\n//@\n//@ Reads input string from given files and returns a string containing all lines of the\n//@ file that match the given `regex_filter`.\n\nfunction _grep(options, regex, files) {\n  // Check if this is coming from a pipe\n  var pipe = common.readFromPipe();\n  if (!files && !pipe) common.error('no paths given', 2);\n  files = [].slice.call(arguments, 2);\n\n  if (pipe) {\n    files.unshift('-');\n  }\n\n  var grep = [];\n\n  if (options.ignoreCase) {\n    regex = new RegExp(regex, 'i');\n  }\n\n  files.forEach(function (file) {\n    if (!fs.existsSync(file) && file !== '-') {\n      common.error('no such file or directory: ' + file, 2, {\n        continue: true\n      });\n      return;\n    }\n\n    var contents = file === '-' ? pipe : fs.readFileSync(file, 'utf8');\n\n    if (options.nameOnly) {\n      if (contents.match(regex)) {\n        grep.push(file);\n      }\n    } else {\n      var lines = contents.split('\\n');\n      lines.forEach(function (line) {\n        var matched = line.match(regex);\n\n        if (options.inverse && !matched || !options.inverse && matched) {\n          grep.push(line);\n        }\n      });\n    }\n  });\n  return grep.join('\\n') + '\\n';\n}\n\nmodule.exports = _grep;","map":null,"metadata":{},"sourceType":"script"}