{"ast":null,"code":"(function (global, factory) {\n  if ('function' == typeof define && define.amd) define(['exports', 'lodash.camelcase', 'string-similarity'], factory);else if ('undefined' != typeof exports) factory(exports, require('lodash.camelcase'), require('string-similarity'));else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports, global.lodash, global.stringSimilarity), global.utils = mod.exports;\n  }\n})(this, function (exports, _lodash, _stringSimilarity) {\n  'use strict';\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function _toConsumableArray(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n      return arr2;\n    }\n\n    return Array.from(arr);\n  }\n\n  Object.defineProperty(exports, '__esModule', {\n    value: !0\n  });\n\n  var _lodash2 = _interopRequireDefault(_lodash),\n      _stringSimilarity2 = _interopRequireDefault(_stringSimilarity),\n      _typeof = 'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && 'function' == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n  };\n\n  exports.default = {\n    handleType: function handleType(value) {\n      var type = value;\n      return 'function' != typeof value && (type = value.constructor), type === String ? ['[value]'] : type === Array ? ['<list>'] : type === Number || type === parseInt ? ['<n>', parseInt] : [''];\n    },\n    readOption: function readOption(option) {\n      var value = option.defaultValue,\n          contents = {},\n          _iteratorNormalCompletion = !0,\n          _didIteratorError = !1,\n          _iteratorError = void 0;\n\n      try {\n        for (var _step, _iterator = option.usage[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {\n          var name = _step.value,\n              fromArgs = this.raw[name];\n          'undefined' != typeof fromArgs && (value = fromArgs);\n        }\n      } catch (err) {\n        _didIteratorError = !0, _iteratorError = err;\n      } finally {\n        try {\n          !_iteratorNormalCompletion && _iterator.return && _iterator.return();\n        } finally {\n          if (_didIteratorError) throw _iteratorError;\n        }\n      }\n\n      var count = -1,\n          _iteratorNormalCompletion2 = !0,\n          _didIteratorError2 = !1,\n          _iteratorError2 = void 0;\n\n      try {\n        for (var _step2, _name, _iterator2 = option.usage[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = !0) {\n          _name = _step2.value, count += 1;\n          var propVal = value;\n          Array.isArray(option.defaultValue) && ('undefined' == typeof propVal ? 'undefined' : _typeof(propVal)) !== _typeof(option.defaultValue) && (0 == count && this.raw._.push(propVal), propVal = [propVal]), 'undefined' != typeof option.defaultValue && ('undefined' == typeof propVal ? 'undefined' : _typeof(propVal)) !== _typeof(option.defaultValue) && (0 == count && this.raw._.push(propVal), propVal = option.defaultValue);\n          var condition = !0;\n          option.init && (option.init === toString && (condition = propVal.constructor === Number), condition && (propVal = option.init(propVal))), 1 < _name.length && (_name = (0, _lodash2.default)(_name)), contents[_name] = propVal;\n        }\n      } catch (err) {\n        _didIteratorError2 = !0, _iteratorError2 = err;\n      } finally {\n        try {\n          !_iteratorNormalCompletion2 && _iterator2.return && _iterator2.return();\n        } finally {\n          if (_didIteratorError2) throw _iteratorError2;\n        }\n      }\n\n      return contents;\n    },\n    getOptions: function getOptions(definedSubcommand) {\n      var _this = this,\n          options = {},\n          args = {},\n          _iteratorNormalCompletion3 = !0,\n          _didIteratorError3 = !1,\n          _iteratorError3 = void 0;\n\n      try {\n        for (var _step3, _option, _iterator3 = this.details.options[Symbol.iterator](); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = !0) (_option = _step3.value, 'undefined' != typeof _option.defaultValue) && Object.assign(options, this.readOption(_option));\n      } catch (err) {\n        _didIteratorError3 = !0, _iteratorError3 = err;\n      } finally {\n        try {\n          !_iteratorNormalCompletion3 && _iterator3.return && _iterator3.return();\n        } finally {\n          if (_didIteratorError3) throw _iteratorError3;\n        }\n      }\n\n      Object.assign(args, this.raw);\n\n      var _ = [].concat(_toConsumableArray(args._));\n\n      for (var option in delete args._, args) if ({}.hasOwnProperty.call(args, option)) {\n        var related = this.isDefined(option, 'options');\n\n        if (related) {\n          var details = this.readOption(related);\n          Object.assign(options, details);\n        }\n\n        related || definedSubcommand || function () {\n          var availableOptions = [];\n\n          _this.details.options.forEach(function (opt) {\n            availableOptions.push.apply(availableOptions, _toConsumableArray(opt.usage));\n          });\n\n          var suggestOption = _stringSimilarity2.default.findBestMatch(option, availableOptions);\n\n          if (console.log('The option \"' + option + '\" is unknown.'), 0.5 <= suggestOption.bestMatch.rating) {\n            console.log(' Did you mean the following one?\\n');\n\n            var suggestion = _this.details.options.filter(function (item) {\n              var _iteratorNormalCompletion4 = !0,\n                  _didIteratorError4 = !1,\n                  _iteratorError4 = void 0;\n\n              try {\n                for (var _step4, flag, _iterator4 = item.usage[Symbol.iterator](); !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = !0) if (flag = _step4.value, flag === suggestOption.bestMatch.target) return !0;\n              } catch (err) {\n                _didIteratorError4 = !0, _iteratorError4 = err;\n              } finally {\n                try {\n                  !_iteratorNormalCompletion4 && _iterator4.return && _iterator4.return();\n                } finally {\n                  if (_didIteratorError4) throw _iteratorError4;\n                }\n              }\n\n              return !1;\n            });\n\n            console.log(_this.generateDetails(suggestion)[0].trim() + '\\n');\n          } else console.log(' Here\\'s a list of all available options: \\n'), _this.showHelp();\n        }();\n      }\n\n      return options._ = _, options;\n    },\n    generateExamples: function generateExamples() {\n      var examples = this.details.examples,\n          parts = [];\n\n      for (var item in examples) if ({}.hasOwnProperty.call(examples, item)) {\n        var usage = this.printSubColor('$ ' + examples[item].usage),\n            description = this.printMainColor('- ' + examples[item].description);\n        parts.push('  ' + description + '\\n\\n    ' + usage + '\\n\\n');\n      }\n\n      return parts;\n    },\n    generateDetails: function generateDetails(kind) {\n      var items = 'string' == typeof kind ? [].concat(_toConsumableArray(this.details[kind])) : [].concat(_toConsumableArray(kind)),\n          parts = [],\n          isCmd = 'commands' === kind;\n\n      for (var item in items.sort(function (a, b) {\n        var first = isCmd ? a.usage : a.usage[1],\n            second = isCmd ? b.usage : b.usage[1];\n\n        switch (!0) {\n          case first < second:\n            return -1;\n\n          case first > second:\n            return 1;\n\n          default:\n            return 0;\n        }\n      }), items) if ({}.hasOwnProperty.call(items, item)) {\n        var usage = items[item].usage,\n            initial = items[item].defaultValue;\n        if (usage.constructor === Array) if (isCmd) usage = usage.join(', ');else {\n          var isVersion = usage.indexOf('v');\n          usage = '-' + usage[0] + ', --' + usage[1], initial || (initial = items[item].init), usage += initial && -1 === isVersion ? ' ' + this.handleType(initial)[0] : '';\n        }\n        items[item].usage = usage;\n      }\n\n      var longest = items.slice().sort(function (a, b) {\n        return b.usage.length - a.usage.length;\n      })[0].usage.length,\n          _iteratorNormalCompletion5 = !0,\n          _didIteratorError5 = !1,\n          _iteratorError5 = void 0;\n\n      try {\n        for (var _step5, _iterator5 = items[Symbol.iterator](); !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = !0) {\n          var _item = _step5.value,\n              usage = _item.usage,\n              description = _item.description,\n              defaultValue = _item.defaultValue,\n              difference = longest - usage.length;\n          usage += ' '.repeat(difference), 'undefined' != typeof defaultValue && ('boolean' == typeof defaultValue ? description += ' (' + (defaultValue ? 'enabled' : 'disabled') + ' by default)' : description += ' (defaults to ' + JSON.stringify(defaultValue) + ')'), parts.push('  ' + this.printMainColor(usage) + '  ' + this.printSubColor(description));\n        }\n      } catch (err) {\n        _didIteratorError5 = !0, _iteratorError5 = err;\n      } finally {\n        try {\n          !_iteratorNormalCompletion5 && _iterator5.return && _iterator5.return();\n        } finally {\n          if (_didIteratorError5) throw _iteratorError5;\n        }\n      }\n\n      return parts;\n    },\n    runCommand: function runCommand(details, options) {\n      if ('help' !== details.usage || this.config.help || (details.init = !1), details.init) {\n        var sub = [].concat(this.sub);\n        return sub.shift(), details.init.bind(this)(details.usage, sub, options);\n      }\n\n      return '';\n    },\n    isDefined: function isDefined(name, list) {\n      var children = this.details[list],\n          _iteratorNormalCompletion6 = !0,\n          _didIteratorError6 = !1,\n          _iteratorError6 = void 0;\n\n      try {\n        for (var _step6, _iterator6 = children[Symbol.iterator](); !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = !0) {\n          var child = _step6.value,\n              usage = child.usage,\n              type = usage.constructor;\n          if (type === Array && -1 < usage.indexOf(name)) return child;\n          if (type === String && usage === name) return child;\n        }\n      } catch (err) {\n        _didIteratorError6 = !0, _iteratorError6 = err;\n      } finally {\n        try {\n          !_iteratorNormalCompletion6 && _iterator6.return && _iterator6.return();\n        } finally {\n          if (_didIteratorError6) throw _iteratorError6;\n        }\n      }\n\n      return !1;\n    }\n  };\n});","map":null,"metadata":{},"sourceType":"script"}