{"ast":null,"code":"(function (global, factory) {\n  if ('function' == typeof define && define.amd) define(['exports', 'react', 'string-similarity', 'whatkey', 'lodash.isequal', 'styled-components', '../../utils', '../types', './terminal-utils', './styled-elements', '../Bar', '../Content/index', '../Tabs/index'], factory);else if ('undefined' != typeof exports) factory(exports, require('react'), require('string-similarity'), require('whatkey'), require('lodash.isequal'), require('styled-components'), require('../../utils'), require('../types'), require('./terminal-utils'), require('./styled-elements'), require('../Bar'), require('../Content/index'), require('../Tabs/index'));else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports, global.React, global.stringSimilarity, global.whatkey, global.lodash, global.styledComponents, global.utils, global.types, global.terminalUtils, global.styledElements, global.Bar, global.index, global.index), global.index = mod.exports;\n  }\n})(this, function (exports, _react, _stringSimilarity, _whatkey2, _lodash, _styledComponents, _utils, _types, _terminalUtils, _styledElements, _Bar, _index, _index3) {\n  'use strict';\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function _toConsumableArray(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n      return arr2;\n    }\n\n    return Array.from(arr);\n  }\n\n  function _defineProperty(obj, key, value) {\n    return key in obj ? Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : obj[key] = value, obj;\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError('Cannot call a class as a function');\n  }\n\n  function _possibleConstructorReturn(self, call) {\n    if (!self) throw new ReferenceError('this hasn\\'t been initialised - super() hasn\\'t been called');\n    return call && ('object' == typeof call || 'function' == typeof call) ? call : self;\n  }\n\n  function _inherits(subClass, superClass) {\n    if ('function' != typeof superClass && null !== superClass) throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: !1,\n        writable: !0,\n        configurable: !0\n      }\n    }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);\n  }\n\n  function compLogic(comp) {\n    switch (comp) {\n      case '>':\n        return function (a, b) {\n          return parseInt(a, 10) > parseInt(b, 10);\n        };\n\n      case '<':\n        return function (a, b) {\n          return parseInt(a, 10) < parseInt(b, 10);\n        };\n\n      case '>=':\n        return function (a, b) {\n          return parseInt(a, 10) >= parseInt(b, 10);\n        };\n\n      case '<=':\n        return function (a, b) {\n          return parseInt(a, 10) <= parseInt(b, 10);\n        };\n\n      case '!=':\n        return function (a, b) {\n          return a !== b;\n        };\n\n      case '=':\n      default:\n        return function (a, b) {\n          return a === b;\n        };\n    }\n  }\n\n  function putCursorAtEnd(el) {\n    if (document.activeElement !== el && el.focus(), el.setSelectionRange) {\n      var len = 2 * el.value.length;\n      setTimeout(function () {\n        el.setSelectionRange(len, len);\n      }, 1);\n    } else el.value = el.value;\n  }\n\n  Object.defineProperty(exports, '__esModule', {\n    value: !0\n  });\n\n  var _class,\n      _temp,\n      _react2 = _interopRequireDefault(_react),\n      _stringSimilarity2 = _interopRequireDefault(_stringSimilarity),\n      _whatkey3 = _interopRequireDefault(_whatkey2),\n      _lodash2 = _interopRequireDefault(_lodash),\n      _Bar2 = _interopRequireDefault(_Bar),\n      _index2 = _interopRequireDefault(_index),\n      _index4 = _interopRequireDefault(_index3),\n      _typeof = 'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && 'function' == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n  },\n      _extends = Object.assign || function (target) {\n    for (var source, i = 1; i < arguments.length; i++) for (var key in source = arguments[i], source) Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);\n\n    return target;\n  },\n      _createClass = function () {\n    function defineProperties(target, props) {\n      for (var descriptor, i = 0; i < props.length; i++) descriptor = props[i], descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 'value' in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;\n    };\n  }(),\n      Terminal = (_temp = _class = function (_Component) {\n    function Terminal(props) {\n      _classCallCheck(this, Terminal);\n\n      var _this = _possibleConstructorReturn(this, (Terminal.__proto__ || Object.getPrototypeOf(Terminal)).call(this, props));\n\n      return _this.componentWillMount = function () {\n        _this.loadPlugins(), _this.assembleCommands(), _this.setDescriptions(), _this.setShortcuts(), _this.createTab(!0);\n      }, _this.componentDidMount = function () {\n        _this.props.watchConsoleLogging && _this.watchConsoleLogging();\n      }, _this.createTab = function () {\n        var force = 0 < arguments.length && void 0 !== arguments[0] && arguments[0],\n            _this$props = _this.props,\n            allowTabs = _this$props.allowTabs,\n            promptSymbol = _this$props.promptSymbol;\n\n        if (force || allowTabs) {\n          var tabs = _this.state.tabs,\n              id = (0, _terminalUtils.uuidv4)();\n          tabs.push(_react2.default.createElement(_index2.default, {\n            key: id,\n            id: id,\n            prompt: promptSymbol,\n            handleChange: _this.handleChange,\n            handlerKeyPress: _this.handlerKeyPress,\n            register: function () {\n              for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) args[_key] = arguments[_key];\n\n              return _this.registerInstance.apply(_this, [id].concat(args));\n            }\n          })), _this.setState({\n            activeTab: id,\n            tabs: tabs\n          });\n        }\n      }, _this.removeTab = function (index) {\n        var tabs = _this.state.tabs;\n        tabs.splice(index, 1), _this.setState({\n          tabs: tabs\n        });\n      }, _this.getAppContent = function () {\n        var _this$state = _this.state,\n            show = _this$state.show,\n            minimise = _this$state.minimise;\n        return show ? minimise ? _this.getBar() : _this.getContent() : _this.getNote();\n      }, _this.getContent = function () {\n        var _this$props2 = _this.props,\n            color = _this$props2.color,\n            style = _this$props2.style,\n            showActions = _this$props2.showActions,\n            hideTopBar = _this$props2.hideTopBar,\n            allowTabs = _this$props2.allowTabs,\n            actionHandlers = _this$props2.actionHandlers,\n            _this$state2 = _this.state,\n            activeTab = _this$state2.activeTab,\n            tabs = _this$state2.tabs;\n        return _react2.default.createElement('div', {\n          style: _extends({}, {\n            height: '100%',\n            color: color || 'green',\n            animation: 'fadeIn 0.18s ease-in',\n            fontFamily: '\\'Inconsolata\\', monospace',\n            fontSize: '0.9em'\n          }, style)\n        }, !hideTopBar && _react2.default.createElement(_Bar2.default, _extends({\n          showActions: showActions\n        }, actionHandlers)), allowTabs && _react2.default.createElement(_index4.default, {\n          active: activeTab,\n          setActiveTab: _this.setActiveTab,\n          createTab: _this.createTab,\n          removeTab: _this.removeTab\n        }), tabs);\n      }, _this.getBar = function () {\n        var _this$props3 = _this.props,\n            style = _this$props3.style,\n            showActions = _this$props3.showActions,\n            actionHandlers = _this$props3.actionHandlers;\n        return _react2.default.createElement(_styledElements.ContainerWrapper, {\n          style: _extends({}, style)\n        }, _react2.default.createElement(_Bar2.default, _extends({\n          showActions: showActions\n        }, actionHandlers)));\n      }, _this.getNote = function () {\n        return _react2.default.createElement(_styledElements.Note, null, _react2.default.createElement('h1', null, _this.props.closedTitle), _react2.default.createElement('img', {\n          src: 'https://camo.githubusercontent.com/95ad3fffa11193f85dedbf14ca67e4c5c07182d0/687474703a2f2f69636f6e732e69636f6e617263686976652e636f6d2f69636f6e732f70616f6d656469612f736d616c6c2d6e2d666c61742f313032342f7465726d696e616c2d69636f6e2e706e67',\n          width: '200',\n          height: '200',\n          alt: 'note',\n          onKeyPress: _this.toggleState('show'),\n          onClick: _this.toggleState('show')\n        }), _this.props.closedMessage);\n      }, _this.getPluginData = function (name) {\n        return _this.pluginData[name];\n      }, _this.setPluginData = function (name, data) {\n        _this.pluginData[name] = data;\n      }, _this.setDescriptions = function () {\n        var descriptions = _extends({}, _this.defaultDesciptions, _this.props.descriptions);\n\n        (0, _terminalUtils.pluginMap)(_this.props.plugins, function (plugin) {\n          plugin.descriptions && (descriptions = _extends({}, descriptions, plugin.descriptions));\n        }), _this.setState({\n          descriptions: descriptions\n        });\n      }, _this.setShortcuts = function () {\n        var shortcuts = (0, _terminalUtils.getShortcuts)({}, _this.defaultShortcuts);\n        shortcuts = (0, _terminalUtils.getShortcuts)(shortcuts, _this.props.shortcuts), (0, _terminalUtils.pluginMap)(_this.props.plugins, function (plugin) {\n          plugin.shortcuts && (shortcuts = (0, _terminalUtils.getShortcuts)(shortcuts, plugin.shortcuts));\n        }), _this.setState({\n          shortcuts: shortcuts\n        });\n      }, _this.setPromptPrefix = function (instance, promptPrefix) {\n        null === instance.state.controller && instance.setState({\n          promptPrefix: promptPrefix\n        });\n      }, _this.setPromptSymbol = function (instance, prompt) {\n        null === instance.state.controller && instance.setState({\n          prompt: prompt\n        });\n      }, _this.setActiveTab = function (activeTab) {\n        _this.setState({\n          activeTab: activeTab\n        });\n      }, _this.setFalse = function (name) {\n        return function () {\n          return _this.setState(_defineProperty({}, name, !1));\n        };\n      }, _this.setTrue = function (name) {\n        return function () {\n          return _this.setState(_defineProperty({}, name, !0));\n        };\n      }, _this.setValueWithHistory = function (instance, position, inputRef) {\n        var history = instance.state.history;\n        history[position] && (instance.setState({\n          historyCounter: position\n        }), inputRef.value = history[position], putCursorAtEnd(inputRef));\n      }, _this.checkVersion = function (comp, ver) {\n        if ('*' === ver) return !0;\n        if (!/^(\\d|\\.)+$/.test(ver)) throw new Error('Version can only have numbers and periods');else {\n          var clean = ver.toLowerCase().replace(/x/g, '0');\n          '.' === clean[clean.length - 1] && (clean += '0');\n\n          for (var split = clean.split('.'); 3 > split.length;) split.push('0');\n\n          var realSplit = Terminal.version.split('.'),\n              checkBools = split.map(function (val, index) {\n            return compLogic(comp)(realSplit[index], val);\n          });\n          return 0 > checkBools.indexOf(!1);\n        }\n      }, _this.registerInstance = function (index, instance) {\n        var instances = _this.state.instances,\n            pluginInstances = {},\n            pluginMethods = {},\n            old = instances.find(function (i) {\n          return i.index === index;\n        });\n        (0, _terminalUtils.pluginMap)(_this.props.plugins, function (PluginClass, config) {\n          try {\n            var plugin,\n                api = {\n              printLine: _this.printLine.bind(_this, instance),\n              removeLine: _this.removeLine.bind(_this, instance),\n              runCommand: _this.runCommand.bind(_this, instance),\n              setCanScroll: _this.setCanScroll.bind(_this, instance),\n              setScrollPosition: _this.setScrollPosition.bind(_this, instance),\n              focusInput: _this.focusInput.bind(_this, instance),\n              setPromptPrefix: _this.setPromptPrefix.bind(_this, instance),\n              setPromptSymbol: _this.setPromptSymbol.bind(_this, instance),\n              getPluginMethod: _this.getPluginMethod.bind(_this, instance),\n              takeControl: _this.pluginTakeControl.bind(_this, instance),\n              releaseControl: _this.pluginReleaseControl.bind(_this, instance),\n              getData: function () {\n                return _this.getPluginData(PluginClass.displayName);\n              },\n              setData: function (data) {\n                return _this.setPluginData(PluginClass.displayName, data);\n              },\n              checkVersion: _this.checkVersion.bind(_this),\n              version: Terminal.version,\n              os: _terminalUtils.os\n            };\n            old ? old.pluginInstances[PluginClass.displayName].updateApi(api) : (plugin = new PluginClass(api, config), pluginMethods[PluginClass.displayName] = _extends({}, plugin.getPublicMethods(), {\n              _getName: function () {\n                return PluginClass.displayName;\n              },\n              _getVersion: function () {\n                return PluginClass.version;\n              }\n            })), pluginInstances[PluginClass.displayName] = plugin;\n          } catch (e) {\n            console.error('Error instantiating plugin ' + PluginClass.displayName, e);\n          }\n        });\n        var data = {\n          index: index,\n          instance: instance,\n          pluginMethods: old ? old.pluginMethods : pluginMethods,\n          pluginInstances: old ? old.pluginInstances : pluginInstances\n        };\n\n        if (old) {\n          var realIndex = instances.indexOf(old);\n          instances[realIndex] = data;\n        } else instances.push(data);\n\n        return _this.setState({\n          instances: instances\n        }), function () {\n          var insts = _this.state.instances;\n\n          _this.setState({\n            instances: insts.filter(function (i) {\n              return !(0, _lodash2.default)(i.instance, instance);\n            })\n          });\n        };\n      }, _this.pluginTakeControl = function (instance, controller, newPrompt, newPromptPrefix) {\n        var _instance$state = instance.state,\n            promptPrefix = _instance$state.promptPrefix,\n            prompt = _instance$state.prompt;\n        instance.setState({\n          controller: controller,\n          prompt: 'undefined' == typeof newPrompt ? prompt : newPrompt,\n          promptPrefix: 'undefined' == typeof newPromptPrefix ? promptPrefix : newPromptPrefix,\n          oldPrefix: promptPrefix,\n          oldPrompt: prompt\n        });\n      }, _this.pluginReleaseControl = function (instance) {\n        var _instance$state2 = instance.state,\n            oldPrefix = _instance$state2.oldPrefix,\n            oldPrompt = _instance$state2.oldPrompt;\n        instance.setState({\n          controller: null,\n          promptPrefix: oldPrefix,\n          prompt: oldPrompt\n        });\n      }, _this.toggleState = function (name) {\n        return function () {\n          return _this.setState(_defineProperty({}, name, !_this.state[name]));\n        };\n      }, _this.assembleCommands = function () {\n        var commands = _extends({}, _this.defaultCommands, _this.props.commands);\n\n        (0, _terminalUtils.pluginMap)(_this.props.plugins, function (plugin) {\n          plugin.commands && (commands = _extends({}, commands, plugin.commands));\n        }), _this.setState({\n          commands: (0, _terminalUtils.modCommands)(commands)\n        });\n      }, _this.autocompleteValue = function (inputRef) {\n        var descriptions = _this.state.descriptions,\n            keysToCheck = Object.keys(descriptions).filter(function (key) {\n          return !1 !== descriptions[key];\n        }),\n            ratings = [];\n        return ratings = 1 < inputRef.value.length ? _stringSimilarity2.default.findBestMatch(inputRef.value, keysToCheck).ratings : keysToCheck.reduce(function (full, item) {\n          return 0 === item.indexOf(inputRef.value) && full.push({\n            target: item,\n            rating: 1\n          }), full;\n        }, []), ratings.filter(function (item) {\n          return 0 < item.rating;\n        });\n      }, _this.clearScreen = function (args, printLine, runCommand, instance) {\n        instance.setState({\n          summary: []\n        });\n      }, _this.checkShortcuts = function (instance, key, e) {\n        var controller = instance.state.controller,\n            cuts = {};\n        if (null !== controller) controller.shortcuts && (cuts = (0, _terminalUtils.getShortcuts)(cuts, controller.shortcuts));else {\n          var instanceData = _this.state.instances.find(function (i) {\n            return (0, _lodash2.default)(i.instance, instance);\n          });\n\n          cuts = _this.state.shortcuts, instanceData && Object.values(instanceData.pluginInstances).forEach(function (i) {\n            cuts = (0, _terminalUtils.getShortcuts)(cuts, i.shortcuts);\n          });\n        }\n        var shortcuts = Object.keys(cuts);\n\n        if (0 < shortcuts.length) {\n          var keyInputs = instance.state.keyInputs,\n              modKey = key;\n          'meta' === key && (modKey = 'darwin' === _terminalUtils.os ? 'cmd' : 'win' === _terminalUtils.os ? 'win' : 'meta'), keyInputs.push(modKey);\n          var len = keyInputs.length,\n              options = shortcuts.map(function (cut, i) {\n            return [cut.replace(/\\s/g, '').split('+'), i];\n          }).filter(function (cut) {\n            return cut[0].length >= keyInputs.length;\n          }).filter(function (cut) {\n            return (0, _lodash2.default)(cut[0].slice(0, len), keyInputs);\n          });\n          if (!(0 < options.length)) 0 < keyInputs.length && instance.setState({\n            keyInputs: []\n          });else if (1 === options.length && options[0][0].length === len) {\n            var shortcut = shortcuts[options[0][1]],\n                action = cuts[shortcut];\n            'string' == typeof action ? _this.runCommand(instance, cuts[shortcut]) : 'function' == typeof action && (e.preventDefault(), e.stopPropagation(), action()), instance.setState({\n              keyInputs: []\n            });\n          }\n        }\n      }, _this.editLine = function (args, printLine, runCommand, instance) {\n        var summary = instance.state.summary,\n            index = args.line;\n        0 > index && (index = 0 === summary.length ? 0 : summary.length - index), summary[index] = args._.join(' '), instance.setState({\n          summary: summary\n        });\n      }, _this.handleChange = function (instance, e) {\n        var _instance$state3 = instance.state,\n            input = _instance$state3.input,\n            promptPrefix = _instance$state3.promptPrefix,\n            prompt = _instance$state3.prompt,\n            history = _instance$state3.history,\n            controller = _instance$state3.controller,\n            saveToHistory = null === controller || controller.history || !1;\n\n        if ('Enter' === e.key && !e.shiftKey) {\n          'undefined' == typeof e.dontShowCommand && _this.printLine.bind(_this, instance)('' + promptPrefix + prompt + ' ' + e.target.value, !1), input.push(e.target.value);\n\n          var res = _this.runCommand(instance, '' + input.join('\\n'));\n\n          'undefined' != typeof res && _this.printLine.bind(_this, instance)(res);\n          var newHistory = [].concat(_toConsumableArray(history), [e.target.value]),\n              historyProps = saveToHistory ? {\n            history: newHistory,\n            historyCounter: newHistory.length\n          } : {};\n          instance.setState(_extends({\n            input: []\n          }, historyProps)), e.target.value = '';\n        } else if ('Enter' === e.key && e.shiftKey) {\n          _this.printLine.bind(_this, instance)('' + promptPrefix + prompt + ' ' + e.target.value, !1);\n\n          var _newHistory = [].concat(_toConsumableArray(history), [e.target.value]),\n              _historyProps = saveToHistory ? {\n            history: _newHistory,\n            historyCounter: _newHistory.length\n          } : {};\n\n          instance.setState(_extends({\n            input: [].concat(_toConsumableArray(input), [e.target.value])\n          }, _historyProps)), e.target.value = '';\n        }\n\n        'function' == typeof _this.props.afterChange && _this.props.afterChange(e);\n      }, _this.handlerKeyPress = function (instance, e, inputRef) {\n        var _whatkey = (0, _whatkey3.default)(e),\n            key = _whatkey.key,\n            _instance$state4 = instance.state,\n            historyCounter = _instance$state4.historyCounter,\n            keyInputs = _instance$state4.keyInputs,\n            controller = _instance$state4.controller;\n\n        if (0 === keyInputs.length || 0 === keyInputs.length) if (null !== controller) controller.onKeyPress && controller.onKeyPress(key);else switch (key) {\n          case 'up':\n            _this.setValueWithHistory(instance, historyCounter - 1, inputRef), _this.state.tabbed && _this.setState({\n              tabbed: !1\n            });\n            break;\n\n          case 'down':\n            _this.setValueWithHistory(instance, historyCounter + 1, inputRef), _this.state.tabbed && _this.setState({\n              tabbed: !1\n            });\n            break;\n\n          case 'tab':\n            if (e.preventDefault(), '' !== inputRef.value && !0 === _this.state.tabbed) {\n              var contents = _this.autocompleteValue(inputRef);\n\n              _this.printLine(instance, '' + instance.state.promptPrefix + instance.state.prompt + ' ' + inputRef.value, !1), _this.printLine(instance, _react2.default.createElement('span', null, contents.filter(function (item) {\n                return 'undefined' != typeof item;\n              }).map(function (item) {\n                var styles = {\n                  marginRight: 5,\n                  width: 'calc(33% - 5px)',\n                  display: 'inline-block'\n                };\n                return 3 < contents.length && (styles.marginBottom = 5), _react2.default.createElement('span', {\n                  style: styles,\n                  key: item.target + '-' + item.rating\n                }, item.target);\n              })), !1), _this.setState({\n                tabbed: !1\n              });\n            } else _this.setState({\n              tabbed: !0\n            });\n\n            break;\n\n          default:\n            _this.state.tabbed && _this.setState({\n              tabbed: !1\n            });\n        }\n\n        _this.checkShortcuts(instance, key, e);\n      }, _this.loadPlugins = function () {\n        var pluginData = {};\n        (0, _terminalUtils.pluginMap)(_this.props.plugins, function (plugin) {\n          try {\n            pluginData[plugin.displayName] = plugin.defaultData;\n          } catch (e) {\n            console.error('Error loading plugin ' + plugin.displayName, e);\n          }\n        }), _this.pluginData = pluginData;\n      }, _this.getPluginMethod = function (instance, name, method) {\n        var instanceData = _this.state.instances.find(function (i) {\n          return (0, _lodash2.default)(i.instance, instance);\n        });\n\n        if (instanceData) if (instanceData.pluginMethods[name]) {\n          if (instanceData.pluginMethods[name][method]) return instanceData.pluginMethods[name][method];\n          throw new Error('No method with name ' + method + ' has been registered for plugin ' + name);\n        } else throw new Error('No plugin with name ' + name + ' has been registered');\n        return null;\n      }, _this.setCanScroll = function (instance, force) {\n        'undefined' != typeof force && instance.setState({\n          canScroll: force\n        });\n      }, _this.setScrollPosition = function (instance, pos) {\n        'number' == typeof pos && instance.setScrollPosition(pos);\n      }, _this.focusInput = function (instance) {\n        'number' == typeof pos && instance.focusInput();\n      }, _this.printLine = function (instance, inp) {\n        var std = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : !0,\n            print = !0;\n\n        if (std) {\n          var instanceData = _this.state.instances.find(function (i) {\n            return (0, _lodash2.default)(i.instance, instance);\n          });\n\n          if (instanceData) for (var plugins = instanceData.pluginInstances, i = 0; i < plugins.length; i += 1) try {\n            print = plugins[i].readStdOut(inp);\n          } catch (e) {}\n        }\n\n        if (!1 !== print) {\n          var summary = instance.state.summary;\n          summary.push(inp), instance.setState({\n            summary: summary\n          });\n        }\n      }, _this.removeLine = function (instance) {\n        var lineNumber = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : -1,\n            summary = instance.state.summary;\n        summary.splice(lineNumber, 1), instance.setState({\n          summary: summary\n        });\n      }, _this.runCommand = function (instance, inputText) {\n        var force = 2 < arguments.length && void 0 !== arguments[2] && arguments[2],\n            inputArray = inputText.split(' '),\n            input = inputArray[0],\n            controller = instance.state.controller,\n            commands = {};\n\n        if (!force && null !== controller) {\n          if (controller.runCommand) return controller.runCommand(inputText);\n          controller.commands && (commands = _extends({}, (0, _terminalUtils.modCommands)(controller.commands)));\n        } else {\n          var instanceData = _this.state.instances.find(function (i) {\n            return (0, _lodash2.default)(i.instance, instance);\n          });\n\n          commands = _extends({}, _this.state.commands), instanceData && Object.values(instanceData.pluginInstances).forEach(function (i) {\n            commands = _extends({}, commands, (0, _terminalUtils.modCommands)(i.commands));\n          });\n        }\n\n        var res,\n            command = commands[input];\n        if ('' === input) ;else if (void 0 === command) 'function' == typeof _this.props.commandPassThrough ? res = _this.props.commandPassThrough(inputArray, _this.printLine.bind(_this, instance), _this.runCommand.bind(_this, instance)) : _this.printLine.bind(_this, instance)('-bash:' + input + ': command not found');else {\n          var parsedArgs = command.parse(inputArray),\n              type = 'undefined' == typeof parsedArgs ? 'undefined' : _typeof(parsedArgs);\n          'object' === type && ('object' !== type || parsedArgs.help) || (res = command.method(parsedArgs, _this.printLine.bind(_this, instance), _this.runCommand.bind(_this, instance), !0 === command.needsInstance ? instance : void 0));\n        }\n        return 'function' == typeof _this.props.commandWasRun && _this.props.commandWasRun(inputArray, _this.printLine.bind(_this, instance), _this.runCommand.bind(_this, instance)), res;\n      }, _this.runCommandOnActive = function (inputText) {\n        var force = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],\n            data = _this.state.instances.find(function (i) {\n          return i.index === _this.state.activeTab;\n        });\n\n        data && null !== data.instance && _this.runCommand(data.instance, inputText, force);\n      }, _this.printToActive = function () {\n        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) args[_key2] = arguments[_key2];\n\n        var data = _this.state.instances.find(function (i) {\n          return i.index === _this.state.activeTab;\n        });\n\n        data && null !== data.instance && null === data.instance.state.controller && _this.printLine.apply(_this, [data.instance].concat(args));\n      }, _this.watchConsoleLogging = function () {\n        (0, _utils.handleLogging)('log', _this.printToActive), (0, _utils.handleLogging)('info', _this.printToActive);\n      }, _this.showHelp = function (args, printLine, runCommand, instance) {\n        var commands = _extends({}, _this.state.commands),\n            descriptions = _extends({}, _this.state.descriptions),\n            instanceData = _this.state.instances.find(function (i) {\n          return (0, _lodash2.default)(i.instance, instance);\n        });\n\n        instanceData && Object.values(instanceData.pluginInstances).forEach(function (i) {\n          commands = _extends({}, commands, i.commands), descriptions = _extends({}, descriptions, i.descriptions);\n        });\n\n        var options = Object.keys(commands),\n            _iteratorNormalCompletion = !0,\n            _didIteratorError = !1,\n            _iteratorError = void 0;\n\n        try {\n          for (var _step, option, _iterator = options[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) option = _step.value, !1 !== descriptions[option] && printLine(option + ' - ' + descriptions[option]);\n        } catch (err) {\n          _didIteratorError = !0, _iteratorError = err;\n        } finally {\n          try {\n            !_iteratorNormalCompletion && _iterator.return && _iterator.return();\n          } finally {\n            if (_didIteratorError) throw _iteratorError;\n          }\n        }\n      }, _this.showMsg = function (args, printLine) {\n        _this.props.msg && 0 < _this.props.msg.length && printLine(_this.props.msg);\n      }, _this.pluginData = {}, _this.defaultCommands = {\n        show: _this.showMsg,\n        clear: {\n          method: _this.clearScreen,\n          needsInstance: !0\n        },\n        help: {\n          method: _this.showHelp,\n          needsInstance: !0\n        },\n        echo: function (input) {\n          return input.slice(1).join(' ');\n        },\n        \"edit-line\": {\n          method: _this.editLine,\n          needsInstance: !0,\n          options: [{\n            name: 'line',\n            description: 'the line you want to edit. -1 is the last line',\n            init: function (value) {\n              return parseInt(value, 10);\n            },\n            defaultValue: -1\n          }]\n        }\n      }, _this.defaultDesciptions = {\n        show: props.msg && 0 < props.msg.length && 'show the msg',\n        clear: 'clear the screen',\n        help: 'list all the commands',\n        echo: !1,\n        \"edit-line\": !1\n      }, _this.defaultShortcuts = {\n        \"win, linux, darwin\": {\n          \"alt + t\": _this.createTab\n        },\n        \"win, linux\": {\n          \"ctrl + l\": 'clear'\n        },\n        darwin: {\n          \"cmd + k\": 'clear'\n        }\n      }, _this.state = {\n        tabbed: !1,\n        commands: {},\n        descriptions: {},\n        show: 'closed' !== props.startState,\n        minimise: 'minimised' === props.startState,\n        maximise: 'maximised' === props.startState,\n        shortcuts: {},\n        activeTab: '',\n        tabs: [],\n        instances: []\n      }, _this;\n    }\n\n    return _inherits(Terminal, _Component), _createClass(Terminal, [{\n      key: 'getChildContext',\n      value: function () {\n        return {\n          instances: this.state.instances,\n          show: this.state.show,\n          minimise: this.state.minimise,\n          maximise: this.state.maximise,\n          activeTab: this.state.activeTab,\n          barShowing: !this.props.hideTopBar,\n          tabsShowing: this.props.allowTabs,\n          openWindow: this.setTrue('show'),\n          closeWindow: this.setFalse('show'),\n          minimiseWindow: this.setTrue('minimise'),\n          unminimiseWindow: this.setFalse('minimise'),\n          maximiseWindow: this.setTrue('maximise'),\n          unmaximiseWindow: this.setFalse('maximise'),\n          toggleShow: this.toggleState('show'),\n          toggleMaximise: this.toggleState('maximise'),\n          toggleMinimize: this.toggleState('minimise')\n        };\n      }\n    }, {\n      key: 'render',\n      value: function () {\n        var theme = {\n          color: this.props.color,\n          prompt: this.props.prompt,\n          barColor: this.props.barColor,\n          outputColor: this.props.outputColor,\n          backgroundColor: this.props.backgroundColor\n        };\n        return _react2.default.createElement(_styledComponents.ThemeProvider, {\n          theme: theme\n        }, _react2.default.createElement(_styledElements.Base, {\n          className: 'terminal-base',\n          fullscreen: this.state.maximise\n        }, this.getAppContent()));\n      }\n    }]), Terminal;\n  }(_react.Component), _class.displayName = 'Terminal', _class.version = '4.3.0', _class.propTypes = _types.TerminalPropTypes, _class.defaultProps = _types.TerminalDefaultProps, _class.childContextTypes = _types.TerminalContextTypes, _temp);\n\n  exports.default = Terminal;\n});","map":null,"metadata":{},"sourceType":"script"}