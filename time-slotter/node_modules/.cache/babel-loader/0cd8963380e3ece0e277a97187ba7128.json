{"ast":null,"code":"var common = require('./common');\n\nvar fs = require('fs'); // add c spaces to the left of str\n\n\nfunction lpad(c, str) {\n  var res = '' + str;\n\n  if (res.length < c) {\n    res = Array(c - res.length + 1).join(' ') + res;\n  }\n\n  return res;\n}\n\ncommon.register('uniq', _uniq, {\n  canReceivePipe: true,\n  cmdOptions: {\n    'i': 'ignoreCase',\n    'c': 'count',\n    'd': 'duplicates'\n  }\n}); //@\n//@ ### uniq([options,] [input, [output]])\n//@\n//@ Available options:\n//@\n//@ + `-i`: Ignore case while comparing\n//@ + `-c`: Prefix lines by the number of occurrences\n//@ + `-d`: Only print duplicate lines, one for each group of identical lines\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ uniq('foo.txt');\n//@ uniq('-i', 'foo.txt');\n//@ uniq('-cd', 'foo.txt', 'bar.txt');\n//@ ```\n//@\n//@ Filter adjacent matching lines from `input`.\n\nfunction _uniq(options, input, output) {\n  // Check if this is coming from a pipe\n  var pipe = common.readFromPipe();\n\n  if (!pipe) {\n    if (!input) common.error('no input given');\n\n    if (!fs.existsSync(input)) {\n      common.error(input + ': No such file or directory');\n    } else if (common.statFollowLinks(input).isDirectory()) {\n      common.error(\"error reading '\" + input + \"'\");\n    }\n  }\n\n  if (output && fs.existsSync(output) && common.statFollowLinks(output).isDirectory()) {\n    common.error(output + ': Is a directory');\n  }\n\n  var lines = (input ? fs.readFileSync(input, 'utf8') : pipe).trimRight().split('\\n');\n\n  var compare = function (a, b) {\n    return options.ignoreCase ? a.toLocaleLowerCase().localeCompare(b.toLocaleLowerCase()) : a.localeCompare(b);\n  };\n\n  var uniqed = lines.reduceRight(function (res, e) {\n    // Perform uniq -c on the input\n    if (res.length === 0) {\n      return [{\n        count: 1,\n        ln: e\n      }];\n    } else if (compare(res[0].ln, e) === 0) {\n      return [{\n        count: res[0].count + 1,\n        ln: e\n      }].concat(res.slice(1));\n    } else {\n      return [{\n        count: 1,\n        ln: e\n      }].concat(res);\n    }\n  }, []).filter(function (obj) {\n    // Do we want only duplicated objects?\n    return options.duplicates ? obj.count > 1 : true;\n  }).map(function (obj) {\n    // Are we tracking the counts of each line?\n    return (options.count ? lpad(7, obj.count) + ' ' : '') + obj.ln;\n  }).join('\\n') + '\\n';\n\n  if (output) {\n    new common.ShellString(uniqed).to(output); // if uniq writes to output, nothing is passed to the next command in the pipeline (if any)\n\n    return '';\n  } else {\n    return uniqed;\n  }\n}\n\nmodule.exports = _uniq;","map":null,"metadata":{},"sourceType":"script"}