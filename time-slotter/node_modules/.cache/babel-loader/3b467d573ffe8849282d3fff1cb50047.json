{"ast":null,"code":"(function (global, factory) {\n  if ('function' == typeof define && define.amd) define(['exports'], factory);else if ('undefined' != typeof exports) factory(exports);else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports), global.option = mod.exports;\n  }\n})(this, function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, '__esModule', {\n    value: !0\n  }), exports.default = function (name, description, defaultValue, init) {\n    var usage = [],\n        assignShort = function (n, options, short) {\n      return options.find(function (flagName) {\n        return flagName.usage[0] === short;\n      }) && (short = n.charAt(0).toUpperCase()), [short, n];\n    };\n\n    switch (name.constructor) {\n      case String:\n        usage = assignShort(name, this.details.options, name.charAt(0));\n        break;\n\n      case Array:\n        usage = usage.concat(name);\n        break;\n\n      default:\n        throw new Error('Invalid name for option');\n    }\n\n    if (0 < usage.length && 1 < usage[0].length) throw new Error('Short version of option is longer than 1 char');\n    var optionDetails = {\n      defaultValue: defaultValue,\n      usage: usage,\n      description: description\n    };\n\n    if (0 === this.details.options.filter(function (item) {\n      return item.usage[1] === usage[1];\n    }).length) {\n      var defaultIsWrong;\n\n      if (defaultIsWrong = !1 === defaultValue || null === defaultValue || void 0 === defaultValue, !defaultIsWrong) {\n        optionDetails.init = 'function' == typeof init ? init : this.handleType(defaultValue)[1];\n      }\n\n      this.details.options.push(optionDetails);\n    }\n\n    return this;\n  };\n});","map":null,"metadata":{},"sourceType":"script"}