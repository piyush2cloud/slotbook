{"ast":null,"code":"import _defineProperty from \"/Users/Piyush/Desktop/abhaas/time-slotter/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/Piyush/Desktop/abhaas/time-slotter/src/Boarding.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { Button, FormGroup, FormControl, Form, Container } from \"react-bootstrap\";\nimport { Redirect } from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport axios from 'axios';\nimport { DragDropContext } from 'react-beautiful-dnd';\nconst initialData = {\n  \"names\": [{\n    \"id\": 1,\n    \"name\": \"Airtel\",\n    \"funcValue\": \"Piyush\",\n    \"portvalue\": \"403\"\n  }, {\n    \"id\": 2,\n    \"value\": \"Vodafone\",\n    \"funcValue\": \"Abhaas\",\n    \"portvalue\": \"403\"\n  }, {\n    \"id\": 3,\n    \"value\": \"Idea\",\n    \"funcValue\": \"Abhinav\",\n    \"portvalue\": \"403\"\n  }]\n};\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  padding: grid,\n  width: 250\n});\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => _objectSpread({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: \"0 0 \".concat(grid, \"px 0\"),\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\"\n}, draggableStyle);\n\nclass Boarding extends Component {\n  constructor(props) {\n    super(props);\n    this.onDragEnd = this.onDragEnd.bind(this);\n    this.state = {\n      items: initialData\n    };\n  }\n\n  onDragEnd(result) {}\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(Droppable, {\n      droppableId: \"droppable\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, (provided, snapshot) => React.createElement(\"div\", Object.assign({}, provided.droppableProps, {\n      ref: provided.innerRef,\n      style: getListStyle(snapshot.isDraggingOver),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), this.state.items.map((item, index) => React.createElement(Draggable, {\n      key: item.id,\n      draggableId: item.id,\n      index: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, (provided, snapshot) => React.createElement(\"div\", Object.assign({\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), item.content)))))));\n  }\n\n  onDrop(data) {\n    console.log(this);\n  }\n\n}\n\nexport default withRouter(Boarding);","map":{"version":3,"sources":["/Users/Piyush/Desktop/abhaas/time-slotter/src/Boarding.js"],"names":["React","Component","Button","FormGroup","FormControl","Form","Container","Redirect","withRouter","axios","DragDropContext","initialData","getListStyle","isDraggingOver","background","padding","grid","width","getItemStyle","isDragging","draggableStyle","userSelect","margin","Boarding","constructor","props","onDragEnd","bind","state","items","result","render","provided","snapshot","droppableProps","innerRef","map","item","index","id","draggableProps","dragHandleProps","style","content","onDrop","data","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Button, FormGroup, FormControl, Form, Container} from \"react-bootstrap\";\nimport { Redirect } from 'react-router-dom'\nimport { withRouter } from 'react-router-dom'\nimport axios from 'axios';\nimport {DragDropContext} from 'react-beautiful-dnd';\n\nconst initialData = {\n    \"names\": [\n        {\"id\": 1, \"name\": \"Airtel\", \"funcValue\": \"Piyush\", \"portvalue\": \"403\"}, \n        {\"id\": 2, \"value\": \"Vodafone\", \"funcValue\": \"Abhaas\", \"portvalue\": \"403\"}, \n        {\"id\": 3, \"value\": \"Idea\", \"funcValue\": \"Abhinav\", \"portvalue\": \"403\"}\n    ]}\n\n\nconst getListStyle = isDraggingOver => ({\n    background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n    padding: grid,\n    width: 250\n});\n\nconst grid = 8;\nconst getItemStyle = (isDragging, draggableStyle) => ({\n    // some basic styles to make the items look a bit nicer\n    userSelect: \"none\",\n    padding: grid * 2,\n    margin: `0 0 ${grid}px 0`,\n    // change background colour if dragging\n    background: isDragging ? \"lightgreen\" : \"grey\",\n    // styles we need to apply on draggables\n    ...draggableStyle\n});\n\n\n      \nclass Boarding extends Component {\n    constructor(props) {\n      super(props);\n      this.onDragEnd = this.onDragEnd.bind(this);\n      this.state = {\n        items: initialData\n      };\n    }\n\n    onDragEnd(result) {\n\n    }\n\n    render() {\n        return (\n            <div>\n                <DragDropContext onDragEnd={this.onDragEnd}>\n                    <Droppable droppableId=\"droppable\">\n                        {(provided, snapshot)=>(\n                            <div {...provided.droppableProps} ref={provided.innerRef} style={getListStyle(snapshot.isDraggingOver)}>\n                                {this.state.items.map((item, index) => (\n                                    <Draggable key={item.id} draggableId={item.id} index={index}>\n                                    {(provided, snapshot) => (\n                                        <div\n                                        ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                        style={getItemStyle(\n                                            snapshot.isDragging,\n                                            provided.draggableProps.style\n                                            )}\n                                        >\n                                        {item.content}\n                                        </div>\n                                    )}\n                                    </Draggable>\n                                ))}\n                            </div>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n            </div>\n        )\n    }\n\n    onDrop(data) {\n        console.log(this)\n    }\n  }\n\nexport default (withRouter)(Boarding)"]},"metadata":{},"sourceType":"module"}