{"ast":null,"code":"var _forEach = require('lodash.foreach');\n\nvar _map = require('lodash.map');\n\nvar _every = require('lodash.every');\n\nvar _maxBy = require('lodash.maxby');\n\nvar _flattenDeep = require('lodash.flattendeep');\n\nexports.compareTwoStrings = compareTwoStrings;\nexports.findBestMatch = findBestMatch;\n\nfunction compareTwoStrings(str1, str2) {\n  var result = null;\n  result = calculateResultIfIdentical(str1, str2);\n\n  if (result != null) {\n    return result;\n  }\n\n  result = calculateResultIfEitherIsEmpty(str1, str2);\n\n  if (result != null) {\n    return result;\n  }\n\n  result = calculateResultIfBothAreSingleCharacter(str1, str2);\n\n  if (result != null) {\n    return result;\n  }\n\n  var pairs1 = wordLetterPairs(str1.toUpperCase());\n  var pairs2 = wordLetterPairs(str2.toUpperCase());\n  var intersection = 0;\n  var union = pairs1.length + pairs2.length;\n\n  _forEach(pairs1, function (pair1) {\n    for (var i = 0; i < pairs2.length; i++) {\n      var pair2 = pairs2[i];\n\n      if (pair1 === pair2) {\n        intersection++;\n        pairs2.splice(i, 1);\n        break;\n      }\n    }\n  });\n\n  return 2.0 * intersection / union; // private functions ---------------------------\n\n  function letterPairs(str) {\n    var numPairs = str.length - 1;\n    var pairs = [];\n\n    for (var i = 0; i < numPairs; i++) {\n      pairs[i] = str.substring(i, i + 2);\n    }\n\n    return pairs;\n  }\n\n  function wordLetterPairs(str) {\n    return _flattenDeep(_map(str.split(' '), letterPairs));\n  }\n\n  function calculateResultIfIdentical(str1, str2) {\n    if (str1.toUpperCase() == str2.toUpperCase()) {\n      return 1;\n    }\n\n    return null;\n  }\n\n  function calculateResultIfBothAreSingleCharacter(str1, str2) {\n    if (str1.length == 1 && str2.length == 1) {\n      return 0;\n    }\n  }\n\n  function calculateResultIfEitherIsEmpty(str1, str2) {\n    // if both are empty strings\n    if (str1.length == 0 && str2.length == 0) {\n      return 1;\n    } // if only one is empty string\n\n\n    if (str1.length + str2.length > 0 && str1.length * str2.length == 0) {\n      return 0;\n    }\n\n    return null;\n  }\n}\n\nfunction findBestMatch(mainString, targetStrings) {\n  if (!areArgsValid(mainString, targetStrings)) {\n    throw new Error('Bad arguments: First argument should be a string, second should be an array of strings');\n  }\n\n  var ratings = _map(targetStrings, function (targetString) {\n    return {\n      target: targetString,\n      rating: compareTwoStrings(mainString, targetString)\n    };\n  });\n\n  return {\n    ratings: ratings,\n    bestMatch: _maxBy(ratings, 'rating')\n  }; // private functions ---------------------------\n\n  function areArgsValid(mainString, targetStrings) {\n    var mainStringIsAString = typeof mainString === 'string';\n\n    var targetStringsIsAnArrayOfStrings = Array.isArray(targetStrings) && targetStrings.length > 0 && _every(targetStrings, function (targetString) {\n      return typeof targetString === 'string';\n    });\n\n    return mainStringIsAString && targetStringsIsAnArrayOfStrings;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}