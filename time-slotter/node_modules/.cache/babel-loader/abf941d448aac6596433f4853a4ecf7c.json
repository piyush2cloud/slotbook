{"ast":null,"code":"var cp = require('child_process');\n\nvar defSpawnOptions = {\n  stdio: 'inherit'\n};\n/**\n * @summary Get shell program meta for current platform\n * @private\n * @returns {Object}\n */\n\nfunction getShell() {\n  if (process.platform === 'win32') {\n    return {\n      cmd: 'cmd',\n      arg: '/C'\n    };\n  } else {\n    return {\n      cmd: 'sh',\n      arg: '-c'\n    };\n  }\n}\n/**\n * Callback is called with the output when the process terminates. Output is\n * available when true is passed as options argument or stdio: null set\n * within given options.\n *\n * @summary Execute shell command forwarding all stdio\n * @param {String|Array} command\n * @param {Object|TRUE} [options] spawn() options or TRUE to set stdio: null\n * @param {Function} [callback]\n * @returns {ChildProcess}\n */\n\n\nfunction execSh(command, options, callback) {\n  if (Array.isArray(command)) {\n    command = command.join(';');\n  }\n\n  if (options === true) {\n    options = {\n      stdio: null\n    };\n  }\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = defSpawnOptions;\n  } else {\n    options = options || {};\n    options = Object.assign({}, defSpawnOptions, options);\n\n    callback = callback || function () {};\n  }\n\n  var child;\n  var stdout = '';\n  var stderr = '';\n  var shell = getShell();\n\n  try {\n    child = cp.spawn(shell.cmd, [shell.arg, command], options);\n  } catch (e) {\n    callback(e, stdout, stderr);\n    return;\n  }\n\n  if (child.stdout) {\n    child.stdout.on('data', function (data) {\n      stdout += data;\n    });\n  }\n\n  if (child.stderr) {\n    child.stderr.on('data', function (data) {\n      stderr += data;\n    });\n  }\n\n  child.on('close', function (code) {\n    if (code) {\n      var e = new Error('Shell command exit with non zero code: ' + code);\n      e.code = code;\n      callback(e, stdout, stderr);\n    } else {\n      callback(null, stdout, stderr);\n    }\n  });\n  return child;\n}\n\nexecSh.promise = function (command, options) {\n  return new Promise(function (resolve, reject) {\n    execSh(command, options, function (err, stdout, stderr) {\n      if (err) {\n        err.stdout = stdout;\n        err.stderr = stderr;\n        return reject(err);\n      }\n\n      resolve({\n        stderr: stderr,\n        stdout: stdout\n      });\n    });\n  });\n};\n\nmodule.exports = execSh;","map":null,"metadata":{},"sourceType":"script"}