{"ast":null,"code":"var common = require('./common');\n\nvar fs = require('fs');\n\ncommon.register('test', _test, {\n  cmdOptions: {\n    'b': 'block',\n    'c': 'character',\n    'd': 'directory',\n    'e': 'exists',\n    'f': 'file',\n    'L': 'link',\n    'p': 'pipe',\n    'S': 'socket'\n  },\n  wrapOutput: false,\n  allowGlobbing: false\n}); //@\n//@ ### test(expression)\n//@\n//@ Available expression primaries:\n//@\n//@ + `'-b', 'path'`: true if path is a block device\n//@ + `'-c', 'path'`: true if path is a character device\n//@ + `'-d', 'path'`: true if path is a directory\n//@ + `'-e', 'path'`: true if path exists\n//@ + `'-f', 'path'`: true if path is a regular file\n//@ + `'-L', 'path'`: true if path is a symbolic link\n//@ + `'-p', 'path'`: true if path is a pipe (FIFO)\n//@ + `'-S', 'path'`: true if path is a socket\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ if (test('-d', path)) { /* do something with dir */ };\n//@ if (!test('-f', path)) continue; // skip if it's a regular file\n//@ ```\n//@\n//@ Evaluates `expression` using the available primaries and returns corresponding value.\n\nfunction _test(options, path) {\n  if (!path) common.error('no path given');\n  var canInterpret = false;\n  Object.keys(options).forEach(function (key) {\n    if (options[key] === true) {\n      canInterpret = true;\n    }\n  });\n  if (!canInterpret) common.error('could not interpret expression');\n\n  if (options.link) {\n    try {\n      return common.statNoFollowLinks(path).isSymbolicLink();\n    } catch (e) {\n      return false;\n    }\n  }\n\n  if (!fs.existsSync(path)) return false;\n  if (options.exists) return true;\n  var stats = common.statFollowLinks(path);\n  if (options.block) return stats.isBlockDevice();\n  if (options.character) return stats.isCharacterDevice();\n  if (options.directory) return stats.isDirectory();\n  if (options.file) return stats.isFile();\n  /* istanbul ignore next */\n\n  if (options.pipe) return stats.isFIFO();\n  /* istanbul ignore next */\n\n  if (options.socket) return stats.isSocket();\n  /* istanbul ignore next */\n\n  return false; // fallback\n} // test\n\n\nmodule.exports = _test;","map":null,"metadata":{},"sourceType":"script"}