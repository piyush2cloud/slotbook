{"ast":null,"code":"var common = require('./common');\n\nvar fs = require('fs');\n\nvar path = require('path');\n\ncommon.register('which', _which, {\n  allowGlobbing: false,\n  cmdOptions: {\n    'a': 'all'\n  }\n}); // XP's system default value for `PATHEXT` system variable, just in case it's not\n// set on Windows.\n\nvar XP_DEFAULT_PATHEXT = '.com;.exe;.bat;.cmd;.vbs;.vbe;.js;.jse;.wsf;.wsh'; // For earlier versions of NodeJS that doesn't have a list of constants (< v6)\n\nvar FILE_EXECUTABLE_MODE = 1;\n\nfunction isWindowsPlatform() {\n  return process.platform === 'win32';\n} // Cross-platform method for splitting environment `PATH` variables\n\n\nfunction splitPath(p) {\n  return p ? p.split(path.delimiter) : [];\n} // Tests are running all cases for this func but it stays uncovered by codecov due to unknown reason\n\n/* istanbul ignore next */\n\n\nfunction isExecutable(pathName) {\n  try {\n    // TODO(node-support): replace with fs.constants.X_OK once remove support for node < v6\n    fs.accessSync(pathName, FILE_EXECUTABLE_MODE);\n  } catch (err) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction checkPath(pathName) {\n  return fs.existsSync(pathName) && !common.statFollowLinks(pathName).isDirectory() && (isWindowsPlatform() || isExecutable(pathName));\n} //@\n//@ ### which(command)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var nodeExec = which('node');\n//@ ```\n//@\n//@ Searches for `command` in the system's `PATH`. On Windows, this uses the\n//@ `PATHEXT` variable to append the extension if it's not already executable.\n//@ Returns string containing the absolute path to `command`.\n\n\nfunction _which(options, cmd) {\n  if (!cmd) common.error('must specify command');\n  var isWindows = isWindowsPlatform();\n  var pathArray = splitPath(process.env.PATH);\n  var queryMatches = []; // No relative/absolute paths provided?\n\n  if (cmd.indexOf('/') === -1) {\n    // Assume that there are no extensions to append to queries (this is the\n    // case for unix)\n    var pathExtArray = [''];\n\n    if (isWindows) {\n      // In case the PATHEXT variable is somehow not set (e.g.\n      // child_process.spawn with an empty environment), use the XP default.\n      var pathExtEnv = process.env.PATHEXT || XP_DEFAULT_PATHEXT;\n      pathExtArray = splitPath(pathExtEnv.toUpperCase());\n    } // Search for command in PATH\n\n\n    for (var k = 0; k < pathArray.length; k++) {\n      // already found it\n      if (queryMatches.length > 0 && !options.all) break;\n      var attempt = path.resolve(pathArray[k], cmd);\n\n      if (isWindows) {\n        attempt = attempt.toUpperCase();\n      }\n\n      var match = attempt.match(/\\.[^<>:\"/\\|?*.]+$/);\n\n      if (match && pathExtArray.indexOf(match[0]) >= 0) {\n        // this is Windows-only\n        // The user typed a query with the file extension, like\n        // `which('node.exe')`\n        if (checkPath(attempt)) {\n          queryMatches.push(attempt);\n          break;\n        }\n      } else {\n        // All-platforms\n        // Cycle through the PATHEXT array, and check each extension\n        // Note: the array is always [''] on Unix\n        for (var i = 0; i < pathExtArray.length; i++) {\n          var ext = pathExtArray[i];\n          var newAttempt = attempt + ext;\n\n          if (checkPath(newAttempt)) {\n            queryMatches.push(newAttempt);\n            break;\n          }\n        }\n      }\n    }\n  } else if (checkPath(cmd)) {\n    // a valid absolute or relative path\n    queryMatches.push(path.resolve(cmd));\n  }\n\n  if (queryMatches.length > 0) {\n    return options.all ? queryMatches : queryMatches[0];\n  }\n\n  return options.all ? [] : null;\n}\n\nmodule.exports = _which;","map":null,"metadata":{},"sourceType":"script"}